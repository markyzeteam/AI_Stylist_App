// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
  appSettings   String?   @db.Text // JSON string of app settings
}

model ProductBodyShapeMapping {
  id           String   @id @default(cuid())
  productId    String   // Shopify Product ID
  bodyShapes   String   // JSON array of suitable body shapes
  sizeChart    String?  // JSON object with size mappings
  category     String?  // clothing category (tops, bottoms, dresses, etc.)
  confidence   Float    @default(0.8) // how confident we are in this mapping
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([productId])
}

model CustomerBodyProfile {
  id           String   @id @default(cuid())
  customerId   String?  // Shopify Customer ID (optional for guests)
  sessionId    String?  // For guest users
  bodyShape    String
  measurements String?  // JSON object with measurements
  preferences  String?  // JSON object with style preferences
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SizeRecommendation {
  id           String   @id @default(cuid())
  productId    String
  bodyShape    String
  recommendedSize String
  confidence   Float    @default(0.8)
  reasoning    String?  // explanation for the size recommendation
  createdAt    DateTime @default(now())

  @@unique([productId, bodyShape])
}

model ClaudePromptSettings {
  id              String   @id @default(cuid())
  shop            String   @unique
  apiKey          String?  @db.Text // Anthropic API key (encrypted)
  systemPrompt    String   @db.Text // Main system prompt for Claude
  recommendationPrompt String @db.Text // Specific prompt for product recommendations
  enabled         Boolean  @default(true) // Whether to use Claude or fallback
  temperature     Float    @default(0.7) // Claude temperature setting
  maxTokens       Int      @default(4096) // Maximum tokens for response
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// ============================================
// NEW TABLES FOR CACHED PRODUCT FILTERING
// ============================================

// Basic filtered products (no AI analysis)
model FilteredSelection {
  id                String    @id @default(cuid())
  shop              String

  // Shopify product data
  shopifyProductId  String
  title             String
  handle            String?
  description       String?   @db.Text
  productType       String?
  tags              String[]
  price             Decimal   @db.Decimal(10, 2)
  imageUrl          String?
  variants          Json?

  // Availability
  inStock           Boolean   @default(true)
  availableSizes    String[]
  categories        String[]

  // Raw Shopify business data (for priority calculations)
  inventoryQuantity Int?      @default(0)
  totalSold         Int?      @default(0)
  profitMargin      Decimal?  @db.Decimal(5, 2)
  compareAtPrice    Decimal?  @db.Decimal(10, 2)  // For calculating isOnSale dynamically
  publishedAt       DateTime?

  // Cached priority calculations (hybrid approach for performance)
  priorityScore        Float?    @default(0)
  priorityCalculatedAt DateTime?

  // Timestamps
  fetchedAt         DateTime  @default(now())
  lastUpdated       DateTime  @updatedAt

  @@unique([shop, shopifyProductId])
  @@index([shop, inStock])
  @@index([shop, inventoryQuantity])
  @@index([shop, totalSold])
  @@index([shop, publishedAt])
  @@index([shop, priorityScore])
}

// Products with Gemini image analysis
model FilteredSelectionWithImgAnalyzed {
  id                String    @id @default(cuid())
  shop              String

  // Shopify product data
  shopifyProductId  String
  title             String
  handle            String?
  description       String?   @db.Text
  productType       String?
  tags              String[]
  price             Decimal   @db.Decimal(10, 2)
  imageUrl          String?
  variants          Json?
  inStock           Boolean   @default(true)
  availableSizes    String[]
  categories        String[]

  // Gemini image analysis
  geminiAnalysis    Json?
  detectedColors    String[]
  colorSeasons      String[]
  silhouetteType    String?
  styleClassification String[]
  fabricTexture     String?
  designDetails     String[]
  patternType       String?
  additionalNotes   String?   @db.Text

  // Size information
  sizeChart         Json?
  sizeFitNotes      String?

  // Values scoring
  sustainabilityScore Int?
  budgetCategory    String?
  styleScores       Json?

  // Raw Shopify business data (for priority calculations)
  inventoryQuantity Int?      @default(0)
  totalSold         Int?      @default(0)
  profitMargin      Decimal?  @db.Decimal(5, 2)
  compareAtPrice    Decimal?  @db.Decimal(10, 2)  // For calculating isOnSale dynamically
  publishedAt       DateTime?

  // Cached priority calculations (hybrid approach for performance)
  priorityScore        Float?    @default(0)
  priorityCalculatedAt DateTime?

  // Timestamps
  analyzedAt        DateTime  @default(now())
  geminiModelVersion String?
  lastUpdated       DateTime  @updatedAt

  @@unique([shop, shopifyProductId])
  @@index([shop, inStock])
  @@index([colorSeasons])
  @@index([styleClassification])
  @@index([shop, inventoryQuantity])
  @@index([shop, totalSold])
  @@index([shop, publishedAt])
  @@index([shop, priorityScore])
}

// Refresh tracking (3x/day limit)
model ProductRefreshLog {
  id              String    @id @default(cuid())
  shop            String
  refreshType     String
  triggeredBy     String?
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  status          String
  productsFetched Int       @default(0)
  productsAnalyzed Int      @default(0)
  geminiApiCalls  Int       @default(0)
  openaiApiCalls  Int       @default(0)
  totalCostUsd    Decimal?  @db.Decimal(10, 4)
  errorMessage    String?   @db.Text

  @@index([shop, startedAt])
}

// OpenAI settings
model OpenAISettings {
  id                    String   @id @default(cuid())
  shop                  String   @unique
  apiKey                String?  @db.Text
  model                 String   @default("gpt-4o-mini")
  systemPrompt          String   @db.Text
  recommendationPrompt  String   @db.Text
  enabled               Boolean  @default(true)
  temperature           Float    @default(0.7)
  maxTokens             Int      @default(4096)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Gemini settings
model GeminiSettings {
  id                 String   @id @default(cuid())
  shop               String   @unique
  apiKey             String?  @db.Text
  model              String   @default("gemini-1.5-flash")

  // 3 PROMPTS ONLY:
  prompt                  String?  @db.Text // Prompt 1: Product image analysis (admin)
  customerAnalysisPrompt  String?  @db.Text // Prompt 2: Customer analysis (body + color + values + celebrity)
  systemPrompt            String?  @db.Text // Prompt 3: Product recommendations (user)

  enabled            Boolean  @default(true)

  // Rate limiting (configurable based on API tier)
  requestsPerMinute  Int     @default(15)    // Free: 15, Paid: 2000
  requestsPerDay     Int     @default(1500)  // Free: 1500, Paid: 50000+
  batchSize          Int     @default(10)    // How many to process before checking limits
  enableRateLimiting Boolean @default(true)  // Allow disabling for unlimited paid tiers

  // Image analysis toggle
  useImageAnalysis   Boolean @default(true)  // Use FilteredSelectionWithImgAnalyzed (true) or FilteredSelection (false)

  // Budget ranges (admin-configurable price ranges)
  budgetLowMax       Decimal @default(30)    @db.Decimal(10, 2)  // Low: $0 - $30
  budgetMediumMax    Decimal @default(80)    @db.Decimal(10, 2)  // Medium: $30 - $80
  budgetHighMax      Decimal @default(200)   @db.Decimal(10, 2)  // High: $80 - $200
  // Luxury: $200+

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Filtering settings
model FilteringSettings {
  id                  String   @id @default(cuid())
  shop                String   @unique
  onlyInStock         Boolean  @default(false)
  includedCategories  String[]
  excludedCategories  String[]
  minPrice            Decimal? @db.Decimal(10, 2)
  maxPrice            Decimal? @db.Decimal(10, 2)
  maxProductsToScan   Int      @default(0)
  numberOfSuggestions Int      @default(30)
  minimumMatchScore   Int      @default(70)
  excludeKeywords     String[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Recommendation Priority Settings
model RecommendationPrioritySettings {
  id              String   @id @default(cuid())
  shop            String   @unique

  // Priority strategy
  strategy        String   @default("balanced")  // balanced, new_arrivals, move_inventory, bestsellers, high_margin, seasonal

  // Weight factors (0-100, default 50 for balanced)
  newArrivalBoost     Int  @default(50)  // Boost for recently published products
  lowInventoryBoost   Int  @default(50)  // Boost for overstocked items
  lowSalesBoost       Int  @default(50)  // Boost for slow-moving products
  highMarginBoost     Int  @default(50)  // Boost for high-profit items
  onSaleBoost         Int  @default(50)  // Boost for sale/discounted items

  // Thresholds
  newArrivalDays      Int  @default(30)   // Products published within X days are "new"
  lowInventoryThreshold Int @default(10)  // Inventory count considered "low"
  lowSalesThreshold   Int  @default(5)    // Total sold considered "low"

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
